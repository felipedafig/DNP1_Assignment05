@using Shared.DTOs.Comments
@using BlazorApp.Services
@inject IUserService UserService

<div class="comments-section">
    <h5 class="mb-3">
        <i class="bi bi-chat-dots"></i> Comments (@Comments.Count)
    </h5>
    
    @if (Comments is null || !Comments.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-chat-square"></i> No comments yet. Be the first to comment!
        </div>
    }
    else
    {
        <div class="list-group">
            @foreach (var comment in Comments)
            {
                <div class="list-group-item">
                    <div class="d-flex w-100 justify-content-between">
                        <h6 class="mb-1">
                            <i class="bi bi-person-circle"></i> @GetAuthorName(comment.UserId)
                        </h6>
                        <small class="text-muted">Comment #@comment.Id</small>
                    </div>
                    <p class="mb-1">@comment.Body</p>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter] public List<CommentDto> Comments { get; set; } = new();
    [Parameter] public EventCallback OnCommentAdded { get; set; }

    private Dictionary<int, string> _authorNames = new();

    protected override async Task OnParametersSetAsync()
    {
        if (Comments.Any())
        {
            await LoadAuthorNames();
        }
    }

    private async Task LoadAuthorNames()
    {
        var userIds = Comments.Select(c => c.UserId).Distinct();
        
        foreach (var userId in userIds)
        {
            if (!_authorNames.ContainsKey(userId))
            {
                try
                {
                    var user = await UserService.GetSingleUserAsync(userId);
                    _authorNames[userId] = user.Username;
                }
                catch
                {
                    _authorNames[userId] = "Unknown User";
                }
            }
        }
    }

    private string GetAuthorName(int userId)
    {
        return _authorNames.TryGetValue(userId, out var name) ? name : "Loading...";
    }
}
